# lefthook.yml - Git hooks configuration
# Ensures code quality by running lint and tests before commits

# Skip hooks in CI environment
skip_output:
  - meta
  - summary

pre-commit:
  parallel: false  # Run sequentially to ensure each step passes
  commands:
    # Step 1: Format code
    fmt:
      glob: "*.go"
      run: |
        echo "📝 Formatting Go files..."
        gofmt -s -w {staged_files}
        goimports -w {staged_files} 2>/dev/null || true
        git add {staged_files}
      
    # Step 2: Tidy modules if go.mod changed
    mod-tidy:
      glob: "go.{mod,sum}"
      run: |
        echo "📦 Tidying Go modules..."
        go mod tidy
        git add go.mod go.sum
    
    # Step 3: Run linter (strict mode)
    lint:
      glob: "*.go"
      run: |
        echo "🔍 Running linter..."
        golangci-lint run --timeout=5m ./...
      fail_text: |
        ❌ Linting failed! Fix the issues before committing.
        Run 'golangci-lint run ./...' to see all issues.
    
    # Step 4: Run unit tests
    test:
      glob: "*.go"
      run: |
        echo "🧪 Running unit tests..."
        go test -short -race -timeout=3m ./...
      fail_text: |
        ❌ Tests failed! Fix the failing tests before committing.
        Run 'go test ./...' to see test failures.
    
    # Step 5: Check build
    build:
      glob: "*.go"
      run: |
        echo "🔨 Checking build..."
        go build -o /tmp/ghp-test ./cmd/ghp
        rm -f /tmp/ghp-test
      fail_text: |
        ❌ Build failed! Fix compilation errors before committing.

pre-push:
  parallel: false
  commands:
    test-all:
      run: make test
    
    lint-all:
      run: golangci-lint run ./...
    
    build:
      run: make build

commit-msg:
  commands:
    check-commit-message:
      run: |
        # Check commit message format
        # Format: type(scope): description  
        # Types: feat, fix, docs, style, refactor, test, chore
        if ! head -1 {1} | grep -qE "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .{1,100}$"; then
          echo "Commit message format is invalid!"
          echo "Format: type(scope): description"
          echo "Types: feat, fix, docs, style, refactor, test, chore"
          echo "Example: feat(api): add project list endpoint"
          exit 1
        fi